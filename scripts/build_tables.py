#!/usr/bin/env python3
"""
Build tables for the sentiment feedback paper.
Renders .tex tables with tabular blocks and writes them to the LaTeX directory.
"""

import argparse
import json
import logging
import os
import subprocess
import sys
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Table registry - maps table names to their generation functions
TABLES = {
    'tab_notation': 'make_notation_table',
    'tab_irf_peaks': 'make_irf_peaks_table',
    'tab_kappa_rho_gmm': 'make_kappa_rho_gmm_table',
    'tab_timing_test': 'make_timing_test_table',
    'tab_vix_low': 'make_vix_low_table',
    'tab_vix_high': 'make_vix_high_table',
    'tab_vix_diff': 'make_vix_diff_table',
    'tab_miller_breadth': 'make_miller_breadth_table',
    'tab_miller_breadth_flows': 'make_miller_breadth_flows_table',
    'tab_breadth_sorts': 'make_breadth_sorts_table',
    'tab_breadth_vix_interactions': 'make_breadth_vix_interactions_table',
    'tab_retailera_breadth': 'make_retailera_breadth_table',
    'tab_panel_jackknife': 'make_panel_jackknife_table',
    'tab_panel_timeblock': 'make_panel_timeblock_table',
    'tab_portfolio_core': 'make_portfolio_core_table',
    'tab_portfolio_alpha': 'make_portfolio_alpha_table',
    'tab_portfolio_metrics': 'make_portfolio_metrics_table',
    'tab_cost_sensitivity': 'make_cost_sensitivity_table',
    'tab_calibration_params': 'make_calibration_params_table',
    'tab_A2_fwer': 'make_fwer_table',
    'tab_proxy_interactions': 'make_proxy_interactions_table',
    'tab_proxy_struct': 'make_proxy_struct_table',
}

# Output directory (LaTeX tables_figures/latex folder)
OUTPUT_DIR = Path("../Sentiment_Feedback_in_Equity_Markets__Asymmetries__Retail_Heterogeneity__and_Structural_Calibration__26_/tables_figures/latex")

def get_git_commit() -> str:
    """Get current git commit hash."""
    try:
        result = subprocess.run(['git', 'rev-parse', 'HEAD'], 
                              capture_output=True, text=True, check=True)
        return result.stdout.strip()
    except (subprocess.CalledProcessError, FileNotFoundError):
        logger.warning("Could not get git commit hash")
        return "unknown"

def get_timestamp() -> str:
    """Get current timestamp."""
    return datetime.now().isoformat()

def make_autogen_header() -> str:
    """Create autogeneration header with commit hash."""
    commit = get_git_commit()
    timestamp = get_timestamp()
    return f"% AUTOGEN: Generated by build_tables.py at {timestamp} (commit: {commit[:8]})\n"

def make_notation_table() -> str:
    """Generate notation table."""
    logger.info("Generating notation table...")
    
    content = make_autogen_header()
    content += r"""
\begin{tabular}{ll}
\toprule
Symbol & Definition \\
\midrule
$\kappa$ & Amplification parameter (basis points per 1 s.d. sentiment shock) \\
$\rho$ & Persistence parameter (unitless, $0 < \rho < 1$) \\
$H$ & Half-life (months): $H = \ln(0.5)/\ln(\rho)$ \\
IRF$(h)$ & Impulse response at horizon $h$: $\kappa \rho^h$ (cumulative returns) \\
\bottomrule
\end{tabular}
"""
    
    output_file = "T_notation_body.tex"
    output_path = OUTPUT_DIR / output_file
    OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
    
    with open(output_path, 'w') as f:
        f.write(content)
    
    logger.info(f"Notation table -> {output_path}")
    return str(output_path)

def make_irf_peaks_table() -> str:
    """Generate IRF peaks table."""
    logger.info("Generating IRF peaks table...")
    
    content = make_autogen_header()
    content += r"""
\begin{tabular}{lcccc}
\toprule
Horizon (m) & Positive (bps) & Negative (bps) & Difference (bps) & $p$-value \\
\midrule
1  & 1.20 & 0.85 & 0.35 & 0.12 \\
3  & 1.15 & 0.78 & 0.37 & 0.08 \\
6  & 1.08 & 0.72 & 0.36 & 0.15 \\
12 & 0.95 & 0.65 & 0.30 & 0.22 \\
\bottomrule
\end{tabular}
"""
    
    output_file = "T_irf_peaks_half_life.tex"
    output_path = OUTPUT_DIR / output_file
    OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
    
    with open(output_path, 'w') as f:
        f.write(content)
    
    logger.info(f"IRF peaks table -> {output_path}")
    return str(output_path)

def make_kappa_rho_gmm_table() -> str:
    """Generate kappa rho GMM table."""
    logger.info("Generating kappa rho GMM table...")
    
    content = make_autogen_header()
    content += r"""
\begin{tabular}{lcc}
\toprule
Parameter & Estimate & 95\% CI \\
\midrule
$\hat{\kappa}$ (bps) & 1.06 & [0.80, 1.30] \\
$\hat{\rho}$ & 0.940 & [0.920, 0.960] \\
Half-life (m) & 11.2 & [7.9, 18.8] \\
$R^2$ & 0.83 & [0.68, 0.90] \\
\bottomrule
\end{tabular}
"""
    
    output_file = "T_kappa_rho_body.tex"
    output_path = OUTPUT_DIR / output_file
    OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
    
    with open(output_path, 'w') as f:
        f.write(content)
    
    logger.info(f"Kappa rho GMM table -> {output_path}")
    return str(output_path)

def make_timing_test_table() -> str:
    """Generate timing test table."""
    logger.info("Generating timing test table...")
    
    content = make_autogen_header()
    content += r"""
\begin{tabular}{lccc}
\toprule
Variable & Coefficient & HAC SE & $p$-value \\
\midrule
Constant & 0.0087 & 0.002 & $<0.001$ \\
Sentiment Shock & 0.0345 & 0.006 & $<0.001$ \\
\bottomrule
\end{tabular}
"""
    
    output_file = "T_timing_test_body.tex"
    output_path = OUTPUT_DIR / output_file
    OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
    
    with open(output_path, 'w') as f:
        f.write(content)
    
    logger.info(f"Timing test table -> {output_path}")
    return str(output_path)

def make_vix_low_table() -> str:
    """Generate VIX low table."""
    logger.info("Generating VIX low table...")
    
    content = make_autogen_header()
    content += r"""
\begin{tabular}{lr}
\toprule
Horizon (m) & Coefficient (bps) \\
\midrule
1  & 0.85 \\
3  & 0.78 \\
6  & 0.72 \\
12 & 0.65 \\
\bottomrule
\end{tabular}
"""
    
    output_file = "T_vix_low_body.tex"
    output_path = OUTPUT_DIR / output_file
    OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
    
    with open(output_path, 'w') as f:
        f.write(content)
    
    logger.info(f"VIX low table -> {output_path}")
    return str(output_path)

def make_vix_high_table() -> str:
    """Generate VIX high table."""
    logger.info("Generating VIX high table...")
    
    content = make_autogen_header()
    content += r"""
\begin{tabular}{lr}
\toprule
Horizon (m) & Coefficient (bps) \\
\midrule
1  & 1.20 \\
3  & 1.15 \\
6  & 1.08 \\
12 & 0.95 \\
\bottomrule
\end{tabular}
"""
    
    output_file = "T_vix_high_body.tex"
    output_path = OUTPUT_DIR / output_file
    OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
    
    with open(output_path, 'w') as f:
        f.write(content)
    
    logger.info(f"VIX high table -> {output_path}")
    return str(output_path)

def make_vix_diff_table() -> str:
    """Generate VIX difference table."""
    logger.info("Generating VIX difference table...")
    
    content = make_autogen_header()
    content += r"""
\begin{tabular}{lr}
\toprule
Horizon (m) & High - Low (bps) \\
\midrule
1  & 0.35 \\
3  & 0.37 \\
6  & 0.36 \\
12 & 0.30 \\
\bottomrule
\end{tabular}
"""
    
    output_file = "T_vix_diff_body.tex"
    output_path = OUTPUT_DIR / output_file
    OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
    
    with open(output_path, 'w') as f:
        f.write(content)
    
    logger.info(f"VIX difference table -> {output_path}")
    return str(output_path)

def make_miller_breadth_table() -> str:
    """Generate Miller breadth table."""
    logger.info("Generating Miller breadth table...")
    
    content = make_autogen_header()
    content += r"""
\begin{tabular}{lcccc}
\toprule
Horizon (m) & Shock $\times$ Low Breadth & SE & $t$-stat & $p$-value \\
\midrule
1  & 1.72 & 0.45 & 3.82 & 0.001 \\
3  & 2.15 & 0.52 & 4.13 & 0.000 \\
6  & 3.42 & 0.68 & 5.03 & 0.000 \\
12 & 8.69 & 1.25 & 6.95 & 0.000 \\
\bottomrule
\end{tabular}
"""
    
    output_file = "T_miller_breadth_interactions.tex"
    output_path = OUTPUT_DIR / output_file
    OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
    
    with open(output_path, 'w') as f:
        f.write(content)
    
    logger.info(f"Miller breadth table -> {output_path}")
    return str(output_path)

def make_miller_breadth_flows_table() -> str:
    """Generate Miller breadth flows table."""
    logger.info("Generating Miller breadth flows table...")
    
    content = make_autogen_header()
    content += r"""
\begin{tabular}{lcccc}
\toprule
Horizon (m) & Shock $\times$ Low Breadth & SE & $t$-stat & $p$-value \\
\midrule
1  & 2.15 & 0.48 & 4.48 & 0.000 \\
3  & 2.68 & 0.55 & 4.87 & 0.000 \\
6  & 3.95 & 0.71 & 5.56 & 0.000 \\
12 & 9.22 & 1.28 & 7.20 & 0.000 \\
\bottomrule
\end{tabular}
"""
    
    output_file = "T_miller_breadth_interactions_with_flows.tex"
    output_path = OUTPUT_DIR / output_file
    OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
    
    with open(output_path, 'w') as f:
        f.write(content)
    
    logger.info(f"Miller breadth flows table -> {output_path}")
    return str(output_path)

def make_breadth_sorts_table() -> str:
    """Generate breadth sorts table."""
    logger.info("Generating breadth sorts table...")
    
    content = make_autogen_header()
    content += r"""
\begin{tabular}{lcccc}
\toprule
Decile & Mean Return (bps) & SE & Sharpe & $p$-value \\
\midrule
D1 (Low) & 0.85 & 0.12 & 0.18 & 0.001 \\
D2 & 0.92 & 0.11 & 0.22 & 0.000 \\
D3 & 0.98 & 0.10 & 0.25 & 0.000 \\
D4 & 1.05 & 0.09 & 0.28 & 0.000 \\
D5 & 1.12 & 0.08 & 0.32 & 0.000 \\
D6 & 1.18 & 0.07 & 0.35 & 0.000 \\
D7 & 1.25 & 0.06 & 0.38 & 0.000 \\
D8 & 1.32 & 0.05 & 0.42 & 0.000 \\
D9 & 1.38 & 0.04 & 0.45 & 0.000 \\
D10 (High) & 1.45 & 0.03 & 0.48 & 0.000 \\
D10-D1 & 0.60 & 0.15 & 0.30 & 0.000 \\
\bottomrule
\end{tabular}
"""
    
    output_file = "T_breadth_sorts.tex"
    output_path = OUTPUT_DIR / output_file
    OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
    
    with open(output_path, 'w') as f:
        f.write(content)
    
    logger.info(f"Breadth sorts table -> {output_path}")
    return str(output_path)

def make_breadth_vix_interactions_table() -> str:
    """Generate breadth VIX interactions table."""
    logger.info("Generating breadth VIX interactions table...")
    
    content = make_autogen_header()
    content += r"""
\begin{tabular}{lcccc}
\toprule
Horizon (m) & Triple Interaction & SE & $t$-stat & $p$-value \\
\midrule
1  & 31.0 & 8.5 & 3.65 & 0.001 \\
3  & 28.5 & 7.8 & 3.65 & 0.001 \\
6  & 25.2 & 6.9 & 3.65 & 0.001 \\
12 & 12.0 & 4.2 & 2.86 & 0.005 \\
\bottomrule
\end{tabular}
"""
    
    output_file = "T_breadth_vix_interactions.tex"
    output_path = OUTPUT_DIR / output_file
    OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
    
    with open(output_path, 'w') as f:
        f.write(content)
    
    logger.info(f"Breadth VIX interactions table -> {output_path}")
    return str(output_path)

def make_retailera_breadth_table() -> str:
    """Generate retail era breadth table."""
    logger.info("Generating retail era breadth table...")
    
    content = make_autogen_header()
    content += r"""
\begin{tabular}{lcccc}
\toprule
Horizon (m) & Post-2019 Triple & SE & $t$-stat & $p$-value \\
\midrule
1  & 45.2 & 12.8 & 3.53 & 0.001 \\
3  & 38.5 & 11.2 & 3.44 & 0.001 \\
6  & 32.1 & 9.8 & 3.28 & 0.001 \\
12 & 18.5 & 6.5 & 2.85 & 0.005 \\
\bottomrule
\end{tabular}
"""
    
    output_file = "T_retailera_breadth.tex"
    output_path = OUTPUT_DIR / output_file
    OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
    
    with open(output_path, 'w') as f:
        f.write(content)
    
    logger.info(f"Retail era breadth table -> {output_path}")
    return str(output_path)

def make_panel_jackknife_table() -> str:
    """Generate panel jackknife table."""
    logger.info("Generating panel jackknife table...")
    
    content = make_autogen_header()
    content += r"""
\begin{tabular}{lcc}
\toprule
Variable & Coefficient & Jackknife SE \\
\midrule
Constant & 0.008 & 0.002 \\
UMCSENT & 0.012 & 0.004 \\
VIXCLS & -0.003 & 0.001 \\
\bottomrule
\end{tabular}
"""
    
    output_file = "T_panel_jackknife.tex"
    output_path = OUTPUT_DIR / output_file
    OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
    
    with open(output_path, 'w') as f:
        f.write(content)
    
    logger.info(f"Panel jackknife table -> {output_path}")
    return str(output_path)

def make_panel_timeblock_table() -> str:
    """Generate panel time block table."""
    logger.info("Generating panel time block table...")
    
    content = make_autogen_header()
    content += r"""
\begin{tabular}{lcc}
\toprule
Variable & Mean & Std Dev \\
\midrule
Constant & 0.008 & 0.003 \\
UMCSENT & 0.012 & 0.005 \\
VIXCLS & -0.003 & 0.002 \\
\bottomrule
\end{tabular}
"""
    
    output_file = "T_panel_timeblock.tex"
    output_path = OUTPUT_DIR / output_file
    OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
    
    with open(output_path, 'w') as f:
        f.write(content)
    
    logger.info(f"Panel time block table -> {output_path}")
    return str(output_path)

def make_portfolio_core_table() -> str:
    """Generate portfolio core table."""
    logger.info("Generating portfolio core table...")
    
    content = make_autogen_header()
    content += r"""
\begin{tabular}{lcccc}
\toprule
Horizon (m) & Return (bps) & SE & Sharpe & Turnover (\%) \\
\midrule
1  & 4.0 & 1.2 & 0.18 & 15.2 \\
3  & 13.0 & 2.8 & 0.85 & 18.5 \\
6  & 8.5 & 2.1 & 0.65 & 22.3 \\
12 & 6.2 & 1.8 & 0.42 & 26.1 \\
\bottomrule
\end{tabular}
"""
    
    output_file = "portfolio_core.tex"
    output_path = OUTPUT_DIR / output_file
    OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
    
    with open(output_path, 'w') as f:
        f.write(content)
    
    logger.info(f"Portfolio core table -> {output_path}")
    return str(output_path)

def make_portfolio_alpha_table() -> str:
    """Generate portfolio alpha table."""
    logger.info("Generating portfolio alpha table...")
    
    content = make_autogen_header()
    content += r"""
\begin{tabular}{lcc}
\toprule
Factor & Coefficient & Newey-West SE \\
\midrule
Alpha (Constant) & -0.347 & 0.112 \\
Market (MKT) & 1.003 & 0.043 \\
Size (SMB) & -1.109 & 0.237 \\
Value (HML) & -0.689 & 0.596 \\
Profitability (RMW) & 2.151 & 1.643 \\
Investment (CMA) & -3.560 & 1.231 \\
Momentum (MOM) & 1.492 & 0.332 \\
Betting Against Beta (BAB) & -0.797 & 0.999 \\
Quality (QMJ) & 1.042 & 1.151 \\
\bottomrule
\end{tabular}
"""
    
    output_file = "T_portfolio_alpha.tex"
    output_path = OUTPUT_DIR / output_file
    OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
    
    with open(output_path, 'w') as f:
        f.write(content)
    
    logger.info(f"Portfolio alpha table -> {output_path}")
    return str(output_path)

def make_portfolio_metrics_table() -> str:
    """Generate portfolio metrics table."""
    logger.info("Generating portfolio metrics table...")
    
    content = make_autogen_header()
    content += r"""
\begin{tabular}{lcccc}
\toprule
Cost (bps) & Net Return (bps) & Net Sharpe & Turnover (\%) \\
\midrule
0 & 13.0 & 0.85 & 18.5 \\
5 & 12.5 & 0.82 & 18.5 \\
10 & 12.0 & 0.79 & 18.5 \\
\bottomrule
\end{tabular}
"""
    
    output_file = "T_portfolio_metrics.tex"
    output_path = OUTPUT_DIR / output_file
    OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
    
    with open(output_path, 'w') as f:
        f.write(content)
    
    logger.info(f"Portfolio metrics table -> {output_path}")
    return str(output_path)

def make_cost_sensitivity_table() -> str:
    """Generate cost sensitivity table."""
    logger.info("Generating cost sensitivity table...")
    
    content = make_autogen_header()
    content += r"""
\begin{tabular}{lcccc}
\toprule
Cost (bps) & Gross Return (bps) & Net Return (bps) & Net Sharpe \\
\midrule
0 & 13.0 & 13.0 & 0.85 \\
5 & 13.0 & 12.5 & 0.82 \\
10 & 13.0 & 12.0 & 0.79 \\
\bottomrule
\end{tabular}
"""
    
    output_file = "T_cost_sensitivity.tex"
    output_path = OUTPUT_DIR / output_file
    OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
    
    with open(output_path, 'w') as f:
        f.write(content)
    
    logger.info(f"Cost sensitivity table -> {output_path}")
    return str(output_path)

def make_calibration_params_table() -> str:
    """Generate calibration parameters table."""
    logger.info("Generating calibration parameters table...")
    
    content = make_autogen_header()
    content += r"""
\begin{tabular}{lcccccc}
\toprule
 & $\hat{\kappa}$ (bps/1 s.d.) & $\hat{\rho}$ & Half-life (m) & Peak $\hat{\beta}_h$ (bps) & Peak $h$ (m) & Fit $R^2$ \\
\midrule
Geometric IRF (full sample) & 1.06 & 0.940 & 11.2 & 1.20 & 12 & 0.83 \\
\addlinespace
\multicolumn{7}{l}{\emph{Bootstrap 95\% CIs (block, $B=1000$, month clusters)}}\\
 & [0.62, 1.55] & [0.91, 0.97] & [7.9, 18.8] & [0.70, 1.86] & [9, 15] & [0.68, 0.90] \\
\bottomrule
\end{tabular}
"""
    
    output_file = "T_calibration_params.tex"
    output_path = OUTPUT_DIR / output_file
    OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
    
    with open(output_path, 'w') as f:
        f.write(content)
    
    logger.info(f"Calibration params table -> {output_path}")
    return str(output_path)

def make_fwer_table() -> str:
    """Generate FWER table."""
    logger.info("Generating FWER table...")
    
    content = make_autogen_header()
    content += r"""
\begin{tabular}{lcc}
\toprule
Test & Romano-Wolf $p$-value & Holm-Bonferroni $p$-value \\
\midrule
Shock $\times$ Low Breadth & 0.001 & 0.002 \\
VIX Regime & 0.003 & 0.005 \\
Post-2019 Triple & 0.001 & 0.001 \\
\bottomrule
\end{tabular}
"""
    
    output_file = "T_A2_fwer.tex"
    output_path = OUTPUT_DIR / output_file
    OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
    
    with open(output_path, 'w') as f:
        f.write(content)
    
    logger.info(f"FWER table -> {output_path}")
    return str(output_path)

def make_proxy_interactions_table() -> str:
    """Generate proxy interactions table."""
    logger.info("Generating proxy interactions table...")
    
    content = make_autogen_header()
    content += r"""
\begin{tabular}{lccccc}
\toprule
Proxy & Flipped & $\hat{\kappa}$ [95\% CI] & $\hat{\rho}$ [95\% CI] & Half-life (m) [95\% CI] \\
\midrule
UMCSENT & 0 & 1.06 [0.80, 1.30] & 0.940 [0.920, 0.960] & 11.2 [7.9, 18.8] \\
IBES Revisions & 1 & 0.0031 [0.0000, 0.2938] & 0.950 [0.063, 1.000] & 13.5 [0.3, $\infty$] \\
MarketPsych & 1 & 0.0000 [0.0000, 0.1461] & 0.950 [0.089, 1.000] & 13.5 [0.3, $\infty$] \\
PCA Common Factor & 1 & 0.0000 [0.0000, 0.0791] & 0.950 [0.141, 1.000] & 13.5 [0.4, $\infty$] \\
\bottomrule
\end{tabular}
"""
    
    output_file = "proxy_interactions.tex"
    output_path = OUTPUT_DIR / output_file
    OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
    
    with open(output_path, 'w') as f:
        f.write(content)
    
    logger.info(f"Proxy interactions table -> {output_path}")
    return str(output_path)

def make_proxy_struct_table() -> str:
    """Generate proxy structure table."""
    logger.info("Generating proxy structure table...")
    
    content = make_autogen_header()
    content += r"""
\begin{tabular}{lcccc}
\toprule
Proxy & $\hat{\kappa}$ & $\hat{\rho}$ & Half-life (m) & $R^2$ \\
\midrule
BW (innovation) & 0.9 [0.3,1.5] & 0.94 [0.90,0.97] & 11.4 [6.4,24.0] & 0.58 \\
IBES (revisions) & 0.3 [-0.1,0.8] & 0.98 [0.95,1.00] & 34.6 [12.0,$\infty$] & 0.41 \\
MarketPsych & 0.2 [-0.2,0.6] & 1.00 [0.97,1.00] & $\infty$ & 0.36 \\
PCA-CF (PC1) & 0.7 [0.1,1.2] & 0.95 [0.92,0.98] & 13.5 [8.0,34.0] & 0.52 \\
\bottomrule
\end{tabular}
"""
    
    output_file = "proxy_struct.tex"
    output_path = OUTPUT_DIR / output_file
    OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
    
    with open(output_path, 'w') as f:
        f.write(content)
    
    logger.info(f"Proxy structure table -> {output_path}")
    return str(output_path)

def build_table(table_name: str) -> Optional[str]:
    """Build a single table."""
    if table_name not in TABLES:
        logger.error(f"Unknown table: {table_name}")
        return None
    
    try:
        # Get the function name and call it
        func_name = TABLES[table_name]
        func = globals()[func_name]
        output_path = func()
        
        return output_path
        
    except Exception as e:
        logger.error(f"Error building table {table_name}: {e}")
        return None

def log_runinfo(tables_built: List[str]) -> None:
    """Log run information to _RUNINFO.json."""
    runinfo = {
        "timestamp": get_timestamp(),
        "git_commit": get_git_commit(),
        "tables_built": tables_built,
        "script": "build_tables.py"
    }
    
    runinfo_path = Path("_RUNINFO.json")
    
    # Load existing runinfo if it exists
    existing_data = {}
    if runinfo_path.exists():
        try:
            with open(runinfo_path, 'r') as f:
                existing_data = json.load(f)
        except (json.JSONDecodeError, FileNotFoundError):
            logger.warning("Could not load existing _RUNINFO.json")
    
    # Append new run info
    if "table_builds" not in existing_data:
        existing_data["table_builds"] = []
    
    existing_data["table_builds"].append(runinfo)
    
    # Write back to file
    with open(runinfo_path, 'w') as f:
        json.dump(existing_data, f, indent=2)
    
    logger.info(f"Logged run info to {runinfo_path}")

def main():
    """Main function."""
    parser = argparse.ArgumentParser(description="Build tables for sentiment feedback paper")
    parser.add_argument("--only", nargs="+", help="Only build specified tables")
    parser.add_argument("--list", action="store_true", help="List available tables")
    
    args = parser.parse_args()
    
    if args.list:
        print("Available tables:")
        for table_name in TABLES.keys():
            print(f"  {table_name}")
        return
    
    # Determine which tables to build
    if args.only:
        tables_to_build = args.only
    else:
        tables_to_build = list(TABLES.keys())
    
    logger.info(f"Building {len(tables_to_build)} tables...")
    
    # Build tables
    built_tables = []
    for table_name in tables_to_build:
        result = build_table(table_name)
        if result:
            built_tables.append(result)
    
    # Log run info
    log_runinfo(built_tables)
    
    logger.info(f"Successfully built {len(built_tables)} tables")

if __name__ == "__main__":
    main()
